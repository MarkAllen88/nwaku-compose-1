/* tslint:disable */
/* eslint-disable */
export function initPanicHook(): void;
export function newRLN(zkey: Uint8Array): number;
export function rlnWitnessToJson(ctx: number, serialized_witness: Uint8Array): object;
export function generateRLNProofWithWitness(ctx: number, calculated_witness: bigint[], serialized_witness: Uint8Array): Uint8Array;
export function generateMembershipKey(ctx: number): Uint8Array;
export function generateExtendedMembershipKey(ctx: number): Uint8Array;
export function generateSeededMembershipKey(ctx: number, seed: Uint8Array): Uint8Array;
export function generateSeededExtendedMembershipKey(ctx: number, seed: Uint8Array): Uint8Array;
export function recovedIDSecret(ctx: number, input_proof_data_1: Uint8Array, input_proof_data_2: Uint8Array): Uint8Array;
export function verifyWithRoots(ctx: number, proof: Uint8Array, roots: Uint8Array): boolean;
export function hash(input: Uint8Array): Uint8Array;
export function poseidonHash(input: Uint8Array): Uint8Array;
export class RLN {
  private constructor();
  free(): void;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_rln_free: (a: number, b: number) => void;
  readonly newRLN: (a: any) => [number, number, number];
  readonly rlnWitnessToJson: (a: number, b: any) => [number, number, number];
  readonly generateRLNProofWithWitness: (a: number, b: number, c: number, d: any) => [number, number, number];
  readonly generateMembershipKey: (a: number) => [number, number, number];
  readonly generateExtendedMembershipKey: (a: number) => [number, number, number];
  readonly generateSeededMembershipKey: (a: number, b: any) => [number, number, number];
  readonly generateSeededExtendedMembershipKey: (a: number, b: any) => [number, number, number];
  readonly recovedIDSecret: (a: number, b: any, c: any) => [number, number, number];
  readonly verifyWithRoots: (a: number, b: any, c: any) => [number, number, number];
  readonly hash: (a: any) => [number, number, number];
  readonly poseidonHash: (a: any) => [number, number, number];
  readonly initPanicHook: () => void;
  readonly __wbindgen_malloc: (a: number, b: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly __externref_table_alloc: () => number;
  readonly __wbindgen_export_4: WebAssembly.Table;
  readonly __wbindgen_free: (a: number, b: number, c: number) => void;
  readonly __externref_table_dealloc: (a: number) => void;
  readonly __wbindgen_start: () => void;
}

export type SyncInitInput = BufferSource | WebAssembly.Module;
/**
* Instantiates the given `module`, which can either be bytes or
* a precompiled `WebAssembly.Module`.
*
* @param {{ module: SyncInitInput }} module - Passing `SyncInitInput` directly is deprecated.
*
* @returns {InitOutput}
*/
export function initSync(module: { module: SyncInitInput } | SyncInitInput): InitOutput;

/**
* If `module_or_path` is {RequestInfo} or {URL}, makes a request and
* for everything else, calls `WebAssembly.instantiate` directly.
*
* @param {{ module_or_path: InitInput | Promise<InitInput> }} module_or_path - Passing `InitInput` directly is deprecated.
*
* @returns {Promise<InitOutput>}
*/
export default function __wbg_init (module_or_path?: { module_or_path: InitInput | Promise<InitInput> } | InitInput | Promise<InitInput>): Promise<InitOutput>;
